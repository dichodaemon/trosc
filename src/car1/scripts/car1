#!/usr/bin/env python
import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import rospy
import numpy as np

from car_navigation_msgs.msg import Control, Status

import cars.car1 as car1

status = None
control_pub = rospy.Publisher( "control", Control )

def drive( status ):
  global control_pub
  if status.track_width != 0.0:
    c = Control()
    mu = 3.5

    desired_speed_1 = car1.max_speed( status.track_curvature, mu )
    desired_speed_2 = car1.max_speed( status.next_curvature, mu )
    brake_distance_2 = car1.braking_distance( status.speed, desired_speed_2, mu )

    desired_speed = desired_speed_1
    c.brake = 0.0

    if status.speed > desired_speed_1 + 10:
      c.brake = 0.5
    if desired_speed > desired_speed_2:
      if brake_distance_2 < status.next_distance:
        desired_speed = desired_speed_2
        if status.speed > desired_speed_2 + 10:
          c.brake = 1.0

    c.acceleration = car1.acceleration(
      status.speed, desired_speed,
      status.gear_ratio, status.max_rpm, status.wheel_radius, status.rpm
    )
    c.steering = car1.steering( 
      status.track_yaw, status.track_curvature, status.track_distance, status.track_width
    )
    c.gear = car1.gear( 
      status.speed, status.gear, status.gear_ratio, status.lower_gear_ratio,
      status.max_rpm, status.wheel_radius
    )
    control_pub.publish( c )

def status_callback( s ):
  global status
  status = s
  print status
  if status.track_width != 0.0:
    drive( status )

def listener():
  rospy.init_node( 'car1' )
  rospy.Subscriber( "status", Status, status_callback )
  rospy.spin()

listener()
