#!/usr/bin/env python
import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import rospy
import numpy as np

from e_motion_perception_msgs.msg import Lane
from car_navigation_msgs.msg import Control, Status

import cars.car1 as car1

lane   = None
status = None
control_pub = rospy.Publisher( "control", Control )

def drive( lane, status ):
  global control_pub
  if lane.width != 0.0:
    c = Control()
    mu = 2.0

    desired_speed_1 = car1.max_speed( lane.ch, mu )
    desired_speed_2 = car1.max_speed( status.next_curvature, mu )
    brake_distance_2 = car1.braking_distance( status.speed, desired_speed_2, mu )

    desired_speed = desired_speed_1
    c.brake = 0.0

    if status.speed > desired_speed_1 + 10:
      c.brake = 0.5
    if desired_speed > desired_speed_2:
      if brake_distance_2 < status.next_distance:
        desired_speed = desired_speed_2
        if status.speed > desired_speed_2 + 10:
          c.brake = 1.0
    #if desired_speed > status.speed:
      #sys.stderr.write( "Accelerating" )
    #elif c.brake > 0.0:
      #sys.stderr.write( "Braking" )
    #else:
      #sys.stderr.write( "Constant" )

    #sys.stderr.write( " Next segment: %f Brake distance: %f\n" % ( status.next_distance, brake_distance_2 )  )

    c.acceleration = car1.acceleration(
      status.speed, desired_speed,
      status.gear_ratio, status.max_rpm, status.wheel_radius, status.rpm
    )
    c.steering = car1.steering( 
      lane.relative_yaw, lane.ch, lane.y0, lane.width
    )
    c.gear = car1.gear( 
      status.speed, status.gear, status.gear_ratio, status.lower_gear_ratio,
      status.max_rpm, status.wheel_radius
    )
    #sys.stderr.write( "steering: %f, speed: %f, desired_speed_1: %f, desired_speed_2: %f, next_distance: %f, brake_distance_2: %f\n"  % ( c.steering, status.speed, desired_speed_1, desired_speed_2, status.next_distance, brake_distance_2 ) )
    #sys.stderr.write( "acceleration: %f, speed: %f, desired speed: %ff\n"  % ( c.acceleration, status.speed, desired_speed ) )
    control_pub.publish( c )

def status_callback( s ):
  global lane
  global status
  status = s
  if lane != None:
    drive( lane, status )

def lane_callback( l ):
  global lane
  global status
  lane = l
  #if status != None:
    #drive( lane, status )

def listener():
  rospy.init_node( 'trosc' )
  rospy.Subscriber( "status", Status, status_callback )
  rospy.Subscriber( "road", Lane, lane_callback )
  rospy.spin()

listener()
