#!/usr/bin/env python

import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import rospy
import numpy as np

from e_motion_perception_msgs.msg import Lane
from car_navigation_msgs.msg import Control, Status, Obstacle, Obstacles, BufferData

import sysv_ipc
import trosc

from math import *

facade = None
control = Control()
status_pub = rospy.Publisher( "status", Status )
obstacle_pub = rospy.Publisher( "obstacles", Obstacles )
buf_pub = rospy.Publisher ( "buffer_data", BufferData)

def facade_callback( event ):
  global facade
  global control

  global lane_pub
  global status_pub
  global obstacle_pub
  try:
    if facade == None:
      facade = trosc.Facade( 6000 )

    c, s, n, obstacles = facade.get_buffer

    status = Status()
    status.speed = s.speed
    status.rpm = s.rpm
    status.gear = s.gear
    status.pose.x = s.x
    status.pose.y = s.y
    status.pose.theta = s.yaw

    status.gear_ratio = s.gear_ratio
    status.lower_gear_ratio = s.lower_gear_ratio
    status.max_rpm = s.max_rpm
    status.wheel_radius = s.wheel_radius
    status.track_yaw = s.track_yaw
    status.track_distance = s.track_distance
    status.track_curvature = s.track_curvature
    status.track_width = s.track_width
    status.next_curvature = s.next_curvature
    status.next_distance = s.next_distance

    status_pub.publish( status )

    c = trosc.Command()
    c.steering = control.steering
    c.acceleration = control.acceleration
    c.brake = control.brake
    c.gear = control.gear
    facade.command = c

    obs = Obstacles()
    for i in xrange( n ):
      o = Obstacle()
      o.id = i
      o.pose.x = obstacles[i].x
      o.pose.y = obstacles[i].y
      o.pose.theta = obstacles[i].theta
      o.speed = ( obstacles[i].vX ** 2 + obstacles[i].vY ** 2 ) ** 0.5
      o.width = obstacles[i].width
      o.height = obstacles[i].length
      obs.obstacles.append( o )
    obstacle_pub.publish( obs )

    buf = BufferData()
    buf.status = status
    buf.control = control
    buf.obstacles = obs
    buf_pub.publish( buf )

  except sysv_ipc.ExistentialError:
    facade = None

def control_callback( c ):
  global control
  control.steering = c.steering
  control.acceleration = c.acceleration
  control.brake = c.brake
  control.gear = c.gear

def listener():
  rospy.init_node( 'trosc' )
  rospy.Timer( rospy.Duration( 0.01 ), facade_callback )
  rospy.Subscriber( "control", Control, control_callback )
  rospy.spin()

listener()
